When handling an e-commerce order process that involves multiple related database 
inserts, such as creating an order, adding order items, and processing payments, it is 
crucial to ensure data integrity. This is where transactions come into play. 
Transactions allow you to group multiple database operations into a single unit of work, ensuring that 
either all operations succeed or none do. This is particularly important in e-commerce 
scenarios to prevent issues like partial order processing, which can lead to 
inconsistencies in the database.

Why Use Transactions?
1. Atomicity: Transactions ensure that a series of operations are treated as a single unit. 
If one operation fails, the entire transaction can be rolled back, leaving the database in a 
consistent state.

2. Consistency: Transactions help maintain the integrity of the database by ensuring 
that all related changes are applied together. For example, if an order is created but the 
payment fails, the order should not be recorded.

3. Isolation: Transactions provide isolation from other operations, ensuring that 
concurrent transactions do not interfere with each other. This is important in a multi-user
environment like an e-commerce platform.

4. Durability: Once a transaction is committed, the changes are permanent, even in the event 
of a system failure.

How to Use Transactions in PHP and MySQL
Hereâ€™s a step-by-step guide on how to implement transactions in PHP with MySQL:

1. Establish a Database Connection: Use PDO (PHP Data Objects) or MySQLi to connect to the database.

2. Begin a Transaction: Start the transaction using the appropriate method.

3. Perform Database Operations: Execute the necessary SQL statements for creating 
the order, adding order items, and processing payments.

4. Commit or Rollback: If all operations are successful, commit the transaction. 
If any operation fails, roll back the transaction to revert all changes.

Example Code:


try {
    // Establish a database connection
    $pdo = new PDO('mysql:host=localhost;dbname=ecommerce', 'username', 'password');
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Begin a transaction
    $pdo->beginTransaction();

    // Step 1: Insert the order
    $stmt = $pdo->prepare("INSERT INTO orders (user_id, total_amount) VALUES (:user_id, :total_amount)");
    $stmt->execute([':user_id' => $userId, ':total_amount' => $totalAmount]);
    $orderId = $pdo->lastInsertId(); // Get the last inserted order ID

    // Step 2: Insert order items
    foreach ($orderItems as $item) {
        $stmt = $pdo->prepare("INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (:order_id, :product_id, :quantity, :price)");
        $stmt->execute([
            ':order_id' => $orderId,
            ':product_id' => $item['product_id'],
            ':quantity' => $item['quantity'],
            ':price' => $item['price']
        ]);
    }

    // Step 3: Process payment
    $stmt = $pdo->prepare("INSERT INTO payments (order_id, amount, payment_method) VALUES (:order_id, :amount, :payment_method)");
    $stmt->execute([':order_id' => $orderId, ':amount' => $totalAmount, ':payment_method' => $paymentMethod]);

    // If all operations are successful, commit the transaction
    $pdo->commit();
    echo "Order processed successfully!";
} catch (Exception $e) {
    // An error occurred, rollback the transaction
    $pdo->rollBack();
    echo "Failed to process order: " . $e->getMessage();
}